//C++ implementation to reverse a doubly linked list using recursion
#include <bits/stdc++.h>
using namespace std;
struct Node { //a node of the doubly linked list
	int data;
	Node *next, *prev;
};
Node* getNode(int data) //function to get a new node
{
	Node* new_node = new Node; //space allocation
	new_node->data = data;
	new_node->next = new_node->prev = NULL;
	return new_node;
}
void push(Node** head_ref, Node* new_node) //function to insert a node at the beginning of the Doubly Linked List
{
	new_node->prev = NULL;
	new_node->next = (*head_ref); 	//link the old list off the new node
	if ((*head_ref) != NULL) //change prev of head node to new node
		(*head_ref)->prev = new_node;
	(*head_ref) = new_node; //move the head to point to the new node
}
Node* Reverse(Node* node) //function to reverse a doubly linked list
{
	if (!node)      	//If list empty,return NULL
		return NULL;
	Node* temp = node->next; //Else swap the next and prev
	node->next = node->prev;
	node->prev = temp;
	if (!node->prev) //If the prev is now NULL, the list has been fully reversed
		return node;
	return Reverse(node->prev);  //else process continues
}
void printList(Node* head)  //Function to print nodes in a given doubly linked list
{
	while (head != NULL) {
		cout << head->data << " ";
		head = head->next;
	}
}
int main()
{
	Node* head = NULL; //Start with the empty list
	push(&head, getNode(2)); //Create doubly linked
	push(&head, getNode(4));
	push(&head, getNode(8));
	push(&head, getNode(10));
	cout << "Original list: ";
	printList(head);
	// Reverse doubly linked list
	head = Reverse(head);
	cout << "\nReversed list: ";
	printList(head);
	return 0;
}
