#Represents the node of list.    
class Node:    
    def __init__(self,data):    
        self.data = data;    
        self.next = None;    
     
class CreateList:    
    #Declaring head and tail pointer as null.    
    def __init__(self):    
        self.head = Node(None);    
        self.tail = Node(None);    
        self.head.next = self.tail;    
        self.tail.next = self.head;    
        self.size = 0;    
        
    #This function will add the new node at the end of the list.    
    def add(self,data):    
        newNode = Node(data);    
        #Checks if the list is empty.    
        if self.head.data is None:    
            #If list is empty, both head and tail would point to new node.    
            self.head = newNode;    
            self.tail = newNode;    
            newNode.next = self.head;    
        else:    
            #tail will point to new node.    
            self.tail.next = newNode;    
            #New node will become new tail.    
            self.tail = newNode;    
            #Since, it is circular linked list tail will point to head.    
            self.tail.next = self.head;    
        #Size will count the number of nodes in the list    
        self.size = int(self.size)+1;    
        
    #Deletes node from the middle of the list    
    def deleteMid(self):    
        #Checks whether list is empty    
        if(self.head == None):    
            return;    
        else:    
            #Store the mid position of the list    
            count = (self.size//2) if (self.size % 2 == 0) else ((self.size+1)//2);    
            #Checks whether head is equal to tail or not, if yes then list has only one node.    
            if( self.head != self.tail ):    
                #Initially temp will point to head;    
                temp = self.head;    
                current = None;    
                #Current will point to node previous to temp    
                #If temp is pointing to node 2 then current will points to node 1.    
                for i in range(0, count-1):    
                    current = temp;    
                    temp = temp.next;    
                if(current != None):    
                    #temp is the middle that needs to be removed.    
                    #So, current node will point to node next to temp by skipping temp.    
                    current.next = temp.next;    
                    #Delete temp;    
                    temp = None;    
                #Current points to null then head and tail will point to node next to temp.    
                else:    
                    self.head = self.tail = temp.next;    
                    self.tail.next = self.head;    
                    #Delete temp;    
                    temp = None;    
            #If the list contains only one element     
            #then it will remove it and both head and tail will point to null    
            else:    
                self.head = self.tail = None;    
        self.size = self.size - 1;    
     
                
    #Displays all the nodes in the list    
    def display(self):    
        current = self.head;    
        if self.head is None:    
            print("List is empty");    
            return;    
        else:    
            #Prints each node by incrementing pointer.    
            print(current.data),    
            while(current.next != self.head):    
                current = current.next;    
                print(current.data),    
            print("\n");    
     
class CircularLinkedList:    
    cl = CreateList();    
    #Adds data to the list    
    cl.add(1);    
    cl.add(2);    
    cl.add(3);    
    cl.add(4);    
    #Printing original list    
    print("Original List:");    
    cl.display();    
    while(cl.head != None):    
        cl.deleteMid();    
        #Printing updated list    
        print("Updated List:");    
        cl.display();  
